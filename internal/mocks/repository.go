// Code generated by MockGen. DO NOT EDIT.
// Source: .\internal\dao\repository.go

// Package mock_dao is a generated GoMock package.
package mock_dao

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dao "github.com/yurchenkosv/gofermart/internal/dao"
	model "github.com/yurchenkosv/gofermart/internal/model"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Atomic mocks base method.
func (m *MockRepository) Atomic(ctx context.Context, fn func(dao.Repository) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Atomic", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Atomic indicates an expected call of Atomic.
func (mr *MockRepositoryMockRecorder) Atomic(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Atomic", reflect.TypeOf((*MockRepository)(nil).Atomic), ctx, fn)
}

// GetBalanceByUserID mocks base method.
func (m *MockRepository) GetBalanceByUserID(userID int) (*model.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceByUserID", userID)
	ret0, _ := ret[0].(*model.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceByUserID indicates an expected call of GetBalanceByUserID.
func (mr *MockRepositoryMockRecorder) GetBalanceByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceByUserID", reflect.TypeOf((*MockRepository)(nil).GetBalanceByUserID), userID)
}

// GetOrderByNumber mocks base method.
func (m *MockRepository) GetOrderByNumber(orderNumber string) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByNumber", orderNumber)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByNumber indicates an expected call of GetOrderByNumber.
func (mr *MockRepositoryMockRecorder) GetOrderByNumber(orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByNumber", reflect.TypeOf((*MockRepository)(nil).GetOrderByNumber), orderNumber)
}

// GetOrdersByUserID mocks base method.
func (m *MockRepository) GetOrdersByUserID(userID int) ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUserID", userID)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByUserID indicates an expected call of GetOrdersByUserID.
func (mr *MockRepositoryMockRecorder) GetOrdersByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUserID", reflect.TypeOf((*MockRepository)(nil).GetOrdersByUserID), userID)
}

// GetOrdersForStatusUpdate mocks base method.
func (m *MockRepository) GetOrdersForStatusUpdate() ([]*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersForStatusUpdate")
	ret0, _ := ret[0].([]*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersForStatusUpdate indicates an expected call of GetOrdersForStatusUpdate.
func (mr *MockRepositoryMockRecorder) GetOrdersForStatusUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersForStatusUpdate", reflect.TypeOf((*MockRepository)(nil).GetOrdersForStatusUpdate))
}

// GetUser mocks base method.
func (m *MockRepository) GetUser(user *model.User) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", user)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockRepositoryMockRecorder) GetUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockRepository)(nil).GetUser), user)
}

// GetWithdrawalsByUserID mocks base method.
func (m *MockRepository) GetWithdrawalsByUserID(userID int) ([]*model.Withdraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalsByUserID", userID)
	ret0, _ := ret[0].([]*model.Withdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalsByUserID indicates an expected call of GetWithdrawalsByUserID.
func (mr *MockRepositoryMockRecorder) GetWithdrawalsByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalsByUserID", reflect.TypeOf((*MockRepository)(nil).GetWithdrawalsByUserID), userID)
}

// SaveBalance mocks base method.
func (m *MockRepository) SaveBalance(balance *model.Balance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBalance", balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBalance indicates an expected call of SaveBalance.
func (mr *MockRepositoryMockRecorder) SaveBalance(balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBalance", reflect.TypeOf((*MockRepository)(nil).SaveBalance), balance)
}

// SaveOrder mocks base method.
func (m *MockRepository) SaveOrder(order *model.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrder", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrder indicates an expected call of SaveOrder.
func (mr *MockRepositoryMockRecorder) SaveOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockRepository)(nil).SaveOrder), order)
}

// SaveUser mocks base method.
func (m *MockRepository) SaveUser(user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockRepositoryMockRecorder) SaveUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockRepository)(nil).SaveUser), user)
}

// SaveWithdraw mocks base method.
func (m *MockRepository) SaveWithdraw(withdraw *model.Withdraw) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveWithdraw", withdraw)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveWithdraw indicates an expected call of SaveWithdraw.
func (mr *MockRepositoryMockRecorder) SaveWithdraw(withdraw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveWithdraw", reflect.TypeOf((*MockRepository)(nil).SaveWithdraw), withdraw)
}

// Shutdown mocks base method.
func (m *MockRepository) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockRepositoryMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockRepository)(nil).Shutdown))
}
